// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generates a dbml file that can visualise the ERD
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User?
  donator Donator?
}

model User {
  id           Int           @unique
  person       Person        @relation(fields: [id], references: [id])
  reservations Reservation[]
  // reviews      Review[]      @relation("UserReviews")

  @@id([id])
}

model Donator {
  id        Int        @unique
  person    Person     @relation(fields: [id], references: [id])
  donations Donation[]
  reviews   Review[]   @relation("DonatorReviews")
  events    Event[]    @relation("Events")

  @@id([id])
}

model Donation {
  id           Int     @id @default(autoincrement())
  title        String  @default("")
  foodReserved Boolean @default(false)
  donatorId    Int
  donator      Donator @relation(fields: [donatorId], references: [id])
  foods        Food[]
}

model Food {
  id          Int           @id @default(autoincrement())
  imageLink   String
  quantity    Int
  type        String
  expiryDate  DateTime
  createdAt   DateTime      @default(now())
  donationId  Int
  donation    Donation      @relation(fields: [donationId], references: [id])
  Reservation Reservation[]
}

// enum ourStatus {
//   PENDING
//   COMPLETE
//   CANCELLED
// }

model Reservation {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  foodId              Int
  food                Food     @relation(fields: [foodId], references: [id])
  CollectionTimeStart DateTime
  CollectionTimeEnd   DateTime
  CollectionStatus    String
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String
  // userId    Int
  // user      User     @relation("UserReviews", fields: [userId], references: [id])
  donatorId Int
  donator   Donator  @relation("DonatorReviews", fields: [donatorId], references: [id])
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  summary        String
  dates          DateTime
  donatorId      Int
  eventOrganiser Donator  @relation("Events", fields: [donatorId], references: [id])
}
