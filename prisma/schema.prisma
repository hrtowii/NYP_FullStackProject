// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generates a dbml file that can visualise the ERD
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Person {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User?
  donator Donator?
  admin   Admin?
}

model User {
  id           Int           @unique
  person       Person        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations Reservation[]
  reviews      Review[]      @relation("UserReviews")

  @@id([id])
}

model Review {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rating      Int
  comment     String
  isAnonymous Boolean  @default(false)
  userId      Int
  user        User     @relation("UserReviews", fields: [userId], references: [id])
  donatorId   Int
  donator     Donator  @relation("DonatorReviews", fields: [donatorId], references: [id])
  reply       Reply?
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  reviewId  Int      @unique
  review    Review   @relation(fields: [reviewId], references: [id])
  donatorId Int
  donator   Donator  @relation(fields: [donatorId], references: [id])
}

model Donator {
  id            Int        @unique
  person        Person     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  donations     Donation[]
  reviews       Review[]   @relation("DonatorReviews")
  events        Event[]    @relation("Events")
  averageRating Float      @default(0)
  reviewCount   Int        @default(0)
  replies Reply[]
  @@id([id])
}

model Admin {
  id     Int    @unique
  person Person @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id])
}

model Donation {
  id           Int      @id @default(autoincrement())
  category     String
  deliveryDate DateTime
  location     String
  remarks      String?
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  donatorId    Int
  donator      Donator  @relation(fields: [donatorId], references: [id])
  availability String @default("Available") // Iruss made this to label availability of donations
  foods        Food[]
  reservations Reservation[]  // remove for now, to test reservation by itself first
}

model Food {
  id               Int               @id @default(autoincrement())
  name             String
  quantity         Int
  type             String
  expiryDate       DateTime
  createdAt        DateTime          @default(now())
  donationId       Int
  donation         Donation          @relation(fields: [donationId], references: [id])
  reservationItems ReservationItem[]
}

model Reservation {
  id                  Int               @id @default(autoincrement())
  userId              Int
  user                User              @relation(fields: [userId], references: [id])
  collectionDate      DateTime
  collectionTimeStart String
  collectionTimeEnd   String
  collectionStatus    String @default("Uncollected")
  remarks             String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reservationItems    ReservationItem[]
  donationId          Int // make it optional to test prisma studio
  donation            Donation? @relation(fields: [donationId], references: [id]) // make it optional to test prisma studio

  @@index([userId])
  @@index([donationId])
}

model ReservationItem {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  foodId        Int
  food          Food        @relation(fields: [foodId], references: [id])
  quantity      Int

  @@index([reservationId])
  @@index([foodId])
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  briefSummary   String
  fullSummary    String
  phoneNumber    String
  emailAddress   String
  startDate      DateTime
  endDate        DateTime
  imageFile      String
  maxSlots       Int
  attire         String
  donatorId      Int
  eventOrganiser Donator  @relation("Events", fields: [donatorId], references: [id])
}
